{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","mouse","command","engine","mouseStart","useEffect","Array","from","document","getElementById","children","forEach","child","remove","Mouse","create","group","Body","nextGroup","Engine","render","Render","element","options","showAngleIndicator","showCollisions","width","showDebug","showPositions","showIds","showShadows","showVertexNumbers","showVelocity","showSeparations","ground","Bodies","rectangle","isStatic","car","Composite","label","carBody","collisionFilter","frontWheel","circle","friction","backWheel","frontAxle","Constraint","bodyB","pointB","x","y","bodyA","stiffness","length","backAxle","add","addConstraint","myConstraint","pointA","position","angularStiffness","strokeStyle","lineWidth","mouseConstraint","MouseConstraint","constraint","World","world","pyramid2","Composites","pyramid","runner","run","Events","on","setAngularVelocity","init","className","id","onMouseDown","onMouseUp","mouseFinish","console","log","mouseXMiddle","mouseYMiddle","Math","abs","height","radius","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.85cdbd06.chunk.js","sourcesContent":["import './App.css';\n\nimport { useEffect } from 'react';\nimport { Engine, Render, Bodies, World, MouseConstraint, Mouse, Constraint, Body, Composite, Events, Composites } from 'matter-js';\n\n\nfunction App() {\n  let mouse;\n  let command;\n  let engine;\n  let mouseStart;\n\n  useEffect(() => {\n    init();\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div id=\"physics\" onMouseDown={_onMouseDown} onMouseUp={_onMouseUp}></div>\n        <button onClick={makeRectangles}>\n          Make Rectangles\n        </button>\n        <button onClick={makeCircles}>\n          Make Circles\n        </button>\n        <button onClick={doNothing}>\n          Do Nothing\n        </button>\n        <p>\n          Evolution\n        </p>\n\n      </header>\n    </div>\n  );\n\n  function _onMouseDown() {\n    mouseStart = {...mouse.position};\n  }\n\n  function _onMouseUp() {\n    const mouseFinish = mouse.position;\n    console.log(mouseStart,mouseFinish);\n    \n    if (command === \"makeRectangle\") {\n      const mouseXMiddle = (mouseStart.x + mouseFinish.x) / 2;\n      const mouseYMiddle = (mouseStart.y + mouseFinish.y) / 2;\n      const width = Math.abs(mouseStart.x - mouseFinish.x)\n      const height = Math.abs(mouseStart.y - mouseFinish.y)\n      const rectangle = Bodies.rectangle(mouseXMiddle,mouseYMiddle , width, height, { isStatic: true });\n      World.add(engine.world, rectangle);\n    }\n    if (command === \"makeCircle\") {\n      const radius = ((mouseStart.y - mouseFinish.y) ^ 2 + (mouseStart.x - mouseFinish.x) ^ 2) ^ 0.5\n      const circle = Bodies.circle(mouse.position.x, mouse.position.y, radius);\n      World.add(engine.world, circle);\n    }\n\n  }\n\n  function makeRectangles() {\n    command = \"makeRectangle\";\n  }\n\n  function makeCircles() {\n    command = \"makeCircle\";\n  }\n  function doNothing() {\n    command = \"doNothing\";\n  }\n\n  function init() {\n    Array.from(document.getElementById(\"physics\").children).forEach(child => child.remove())\n    mouse = Mouse.create(document.getElementById(\"physics\"));\n    const group = Body.nextGroup(true);\n\n    // create an engine\n    engine = Engine.create();\n\n    // create a renderer\n    const render = Render.create({\n      element: document.getElementById(\"physics\"),\n      engine: engine,\n      options: {\n        showAngleIndicator: true,\n        showCollisions: true,\n        width: 2200,\n        showDebug: true,\n        showPositions: true,\n        showIds: true,\n        showShadows: true,\n        showVertexNumbers: false,\n        showVelocity: true,\n        showSeparations: true,\n      }\n    });\n\n    // create two boxes and a ground\n    const ground = Bodies.rectangle(400, 610, 30000, 60, { isStatic: true });\n\n    const car = Composite.create({ label: 'Car' });\n\n    const carBody = Bodies.rectangle(200, 60, 200, 20, {\n      collisionFilter: {\n        group: group\n      }\n    })\n\n    const frontWheel = Bodies.circle(100, 60, 70, {\n      collisionFilter: {\n        group: group\n      },\n      friction: 0.8,\n\n    });\n    const backWheel = Bodies.circle(300, 60, 70, {\n      collisionFilter: {\n        group: group\n      },\n      friction: 0.8\n    });\n\n\n\n    const frontAxle = Constraint.create({\n      bodyB: carBody,\n      pointB: { x: 100, y: 0 },\n      bodyA: frontWheel,\n      stiffness: 1,\n      length: 0\n    });\n\n    const backAxle = Constraint.create({\n      bodyB: carBody,\n      pointB: { x: -100, y: 0 },\n      bodyA: backWheel,\n      stiffness: 1,\n      length: 0\n    });\n\n\n\n\n\n    Composite.add(car, carBody)\n    Composite.add(car, frontWheel)\n    Composite.add(car, backWheel)\n\n    Composite.addConstraint(car, frontAxle);\n    Composite.addConstraint(car, backAxle);\n\n\n    const myConstraint = Constraint.create({\n      label: 'Mouse Constraint',\n      pointA: mouse.position,\n      pointB: { x: 0, y: 0 },\n      length: 0.01,\n      stiffness: 1,\n      angularStiffness: 0,\n      render: {\n        strokeStyle: '#90EE90',\n        lineWidth: 3\n      }\n    });\n\n    const mouseConstraint = MouseConstraint.create(engine, { mouse, constraint: myConstraint })\n\n    // add all of the bodies to the world\n    World.add(engine.world, [\n      //     boxA,\n      //boxB, \n      ground]);\n\n    World.add(engine.world, [\n      mouseConstraint,\n      //  frontAxle, \n      //  backAxle\n    ]);\n\n    //   World.add(engine.world, Composites.car(150, 100, 150 , 30 , 30 ));\n\n    //   const constraint = Constraint.create({ bodyA: boxA, bodyB: boxB })\n    //   World.add(engine.world, constraint);\n    World.add(engine.world, car);\n\n    const pyramid2 = Composites.pyramid(1300, 0, 15, 30, 0, 0, function (x, y) {\n      return Bodies.rectangle(x, y, 20, 30);\n    });\n\n    //var pyramid3 = Composites.pyramid(800, 0, 12, 12, 0, 0, function (x, y) {\n    //return Bodies.circle(x, y, 8);\n    //});\n\n    World.add(engine.world, pyramid2);\n    //World.add(engine.world, pyramid3);\n\n    // run the engine\n    const runner = Engine.run(engine);\n\n    Events.on(runner, \"beforeTick\", function () {\n      Body.setAngularVelocity(backWheel, .5);\n      Body.setAngularVelocity(frontWheel, .5);\n    })\n\n    //  Runner.stop(runner);\n    // run the renderer\n    Render.run(render);\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}