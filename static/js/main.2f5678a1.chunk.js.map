{"version":3,"sources":["createCar.js","commands.js","Controls.jsx","Physics.jsx","App.js","reportWebVitals.js","index.js"],"names":["createCar","carCenter","wheelBase","wheelRadius","halfWheelBase","frontWheelX","x","backWheelX","car","Composite","create","label","group","Body","nextGroup","carBody","Bodies","rectangle","y","collisionFilter","frontWheel","circle","friction","backWheel","frontAxle","Constraint","bodyB","pointB","bodyA","stiffness","length","backAxle","add","addConstraint","mouseXDistance","mouseStart","mouseFinish","Math","abs","mouseYDistance","commands","name","doCommand","engine","mouseXMiddle","mouseYMiddle","width","height","isStatic","World","world","radius","mouseDistance","pyraWidth","round","pyramid4","Composites","pyramid","Events","on","setAngularVelocity","indexedCommands","Object","assign","map","command","defaultCommand","getCommand","commandName","Controls","props","onClick","setCommand","Physics","useState","setMouseStart","mouse","setMouse","useEffect","mainElement","document","getElementById","Array","from","children","forEach","child","remove","initMouse","Mouse","render","Render","element","options","showAngleIndicator","showCollisions","showDebug","showPositions","showIds","showShadows","showVertexNumbers","showVelocity","showSeparations","ground","myConstraint","pointA","position","angularStiffness","strokeStyle","lineWidth","mouseConstraint","MouseConstraint","constraint","Engine","run","id","onMouseDown","onMouseUp","commandToExecute","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.2f5678a1.chunk.js","sourcesContent":["import { Bodies, Constraint, Composite, Body} from 'matter-js';\r\n\r\nfunction createCar(carCenter, wheelBase, wheelRadius) {\r\n\r\n    const halfWheelBase = wheelBase/2\r\n    const frontWheelX = carCenter.x + halfWheelBase\r\n    const backWheelX = carCenter.x - halfWheelBase\r\n\r\n    const car = Composite.create({ label: 'Car' });\r\n    const group = Body.nextGroup(true);\r\n\r\n    const carBody = Bodies.rectangle(carCenter.x, carCenter.y, wheelBase, 20, {\r\n        collisionFilter: {\r\n            group: group\r\n        }\r\n    })\r\n\r\n    \r\n    const frontWheel = Bodies.circle(frontWheelX, carCenter.y, wheelRadius, {\r\n        collisionFilter: {\r\n            group: group\r\n        },\r\n        friction: 0.8,\r\n\r\n    });\r\n    const backWheel = Bodies.circle(backWheelX, carCenter.y, wheelRadius, {\r\n        collisionFilter: {\r\n            group: group\r\n        },\r\n        friction: 0.8\r\n    });\r\n\r\n    const frontAxle = Constraint.create({\r\n        bodyB: carBody,\r\n        pointB: { x:  halfWheelBase, y: 0 },\r\n        bodyA: frontWheel,\r\n        stiffness: 1,\r\n        length: 0\r\n    });\r\n\r\n    const backAxle = Constraint.create({\r\n        bodyB: carBody,\r\n        pointB: { x: - halfWheelBase, y: 0 },\r\n        bodyA: backWheel,\r\n        stiffness: 1,\r\n        length: 0\r\n    });\r\n\r\n    Composite.add(car, carBody)\r\n    Composite.add(car, frontWheel)\r\n    Composite.add(car, backWheel)\r\n\r\n    Composite.addConstraint(car, frontAxle);\r\n    Composite.addConstraint(car, backAxle);\r\n\r\n    return {car, backWheel, frontWheel};\r\n}\r\n\r\nexport default createCar;","import { Bodies, World, Composites, Events, Body } from 'matter-js';\r\nimport createCar from './createCar.js';\r\n\r\nfunction mouseXDistance(mouseStart, mouseFinish) {\r\n    return Math.abs(mouseStart.x - mouseFinish.x);\r\n}\r\n\r\nfunction mouseYDistance(mouseStart, mouseFinish) {\r\n    return Math.abs(mouseStart.y - mouseFinish.y);\r\n}\r\n\r\nfunction mouseDistance(mouseStart, mouseFinish) {\r\n    return ((mouseStart.y - mouseFinish.y) ** 2 + (mouseStart.x - mouseFinish.x) ** 2) ** 0.5;\r\n}\r\n\r\nconst commands = [\r\n    {\r\n        label: 'Make Rectangle',\r\n        name: 'makeRectangle',\r\n        doCommand: function (engine, mouseStart, mouseFinish) {\r\n            const mouseXMiddle = (mouseStart.x + mouseFinish.x) / 2;\r\n            const mouseYMiddle = (mouseStart.y + mouseFinish.y) / 2;\r\n            const width = mouseXDistance(mouseStart, mouseFinish)\r\n            const height = mouseYDistance(mouseStart, mouseFinish)\r\n            const rectangle = Bodies.rectangle(mouseXMiddle, mouseYMiddle, width, height, { isStatic: false });\r\n            World.add(engine.world, rectangle);\r\n        }\r\n    },\r\n    {\r\n        label: 'Make Circle',\r\n        name: 'makeCircle',\r\n        doCommand: function (engine, mouseStart, mouseFinish) {\r\n            const radius = mouseDistance(mouseStart, mouseFinish);\r\n            const circle = Bodies.circle(mouseStart.x, mouseStart.y, radius);\r\n            World.add(engine.world, circle);\r\n        }\r\n    },\r\n    {\r\n        label: 'Make Pyramid',\r\n        name: 'makePyramid',\r\n        doCommand: function (engine, mouseStart, mouseFinish) {\r\n            const shapeSize = 30\r\n            const pyraWidth = Math.round(mouseXDistance(mouseStart, mouseFinish) / shapeSize)\r\n            const pyramid4 = Composites.pyramid(mouseStart.x, mouseStart.y, pyraWidth, 30, 0, 0, function (x, y) {\r\n                return Bodies.rectangle(x, y, shapeSize, shapeSize);\r\n            });\r\n            World.add(engine.world, pyramid4);\r\n        }\r\n    },\r\n    {\r\n        label: 'Make Car',\r\n        name: 'makeCar',\r\n        doCommand: function (engine, mouseStart, mouseFinish) {\r\n            const carCenter = mouseStart;\r\n            const wheelBase = mouseXDistance(mouseStart, mouseFinish) * 2\r\n            const wheelRadius = mouseYDistance(mouseStart, mouseFinish);\r\n            const { car, backWheel, frontWheel } = createCar(carCenter, wheelBase, wheelRadius)\r\n\r\n            Events.on(engine, \"beforeUpdate\", function () {\r\n                Body.setAngularVelocity(backWheel, .5);\r\n                Body.setAngularVelocity(frontWheel, .5);\r\n              })\r\n\r\n            World.add(engine.world, car);\r\n        }\r\n    },\r\n    {\r\n        label: 'Do Nothing',\r\n        name: 'doNothing',\r\n        doCommand: function (engine, mouseStart, mouseFinish) {\r\n\r\n        }\r\n    },\r\n]\r\n\r\nconst indexedCommands = Object.assign({}, ...commands.map(command => ({ [command.name]: command })));\r\nconst defaultCommand = indexedCommands['doNothing'];\r\n\r\nfunction getCommand(commandName) {\r\n    return indexedCommands[commandName];\r\n}\r\n\r\nfunction doCommand(commandName, engine, mouseStart, mouseFinish) {\r\n    const commandToExecute = getCommand(commandName);\r\n    if (commandToExecute) {\r\n        commandToExecute.doCommand(engine, mouseStart, mouseFinish)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default commands;\r\nexport { doCommand, defaultCommand, getCommand };","import commands, {getCommand} from './commands.js'\r\n\r\nfunction Controls(props) {\r\n\r\n    function doCommand(name) {\r\n        props.setCommand(name);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {commands.map(command =>\r\n                <button key={command.name} onClick={() => doCommand(command.name)} >\r\n                    {command.label}\r\n                </button>)}\r\n            <div> Command: {getCommand(props.command).label}</div>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Controls","import { useEffect, useState } from 'react';\r\nimport { Engine, Render, Bodies, World, MouseConstraint, Mouse, Constraint } from 'matter-js';\r\nimport { doCommand } from './commands'\r\n\r\nfunction Physics(props) {\r\n    const [mouseStart, setMouseStart] = useState(null);\r\n    const [mouse, setMouse] = useState(null);\r\n\r\n    useEffect(init, [props.engine]);\r\n\r\n    return <div id=\"physics\" onMouseDown={_onMouseDown} onMouseUp={_onMouseUp}></div>\r\n\r\n    function _onMouseDown() {\r\n        setMouseStart({ ...mouse.position });\r\n    }\r\n\r\n    function _onMouseUp() {\r\n        const mouseFinish = mouse.position;\r\n        doCommand(props.command, props.engine, mouseStart, mouseFinish);\r\n    }\r\n\r\n    function init() {\r\n        const mainElement = document.getElementById(\"physics\");\r\n\r\n        Array.from(mainElement.children).forEach(child => child.remove())\r\n        const initMouse = Mouse.create(mainElement);\r\n        setMouse(initMouse);\r\n\r\n        const render = Render.create({\r\n            element: mainElement,\r\n            engine: props.engine,\r\n            options: {\r\n                showAngleIndicator: true,\r\n                showCollisions: true,\r\n                width: 2200,\r\n                showDebug: true,\r\n                showPositions: true,\r\n                showIds: true,\r\n                showShadows: true,\r\n                showVertexNumbers: false,\r\n                showVelocity: true,\r\n                showSeparations: true,\r\n            }\r\n        });\r\n\r\n        const ground = Bodies.rectangle(400, 610, 30000, 60, { isStatic: true });\r\n\r\n        const myConstraint = Constraint.create({\r\n            label: 'Mouse Constraint',\r\n            pointA: initMouse.position,\r\n            pointB: { x: 0, y: 0 },\r\n            length: 0.01,\r\n            stiffness: 1,\r\n            angularStiffness: 0,\r\n            render: {\r\n                strokeStyle: '#90EE90',\r\n                lineWidth: 3\r\n            }\r\n        });\r\n\r\n        const mouseConstraint = MouseConstraint.create(props.engine, { mouse: initMouse, constraint: myConstraint })\r\n\r\n        World.add(props.engine.world, [\r\n            ground,\r\n            mouseConstraint\r\n        ]);\r\n\r\n        Engine.run(props.engine);\r\n        Render.run(render);\r\n    }\r\n}\r\n\r\nexport default Physics","import './App.css';\n\nimport { useState } from 'react';\nimport { Engine } from 'matter-js';\nimport { defaultCommand } from './commands'\nimport Controls from './Controls.jsx'\nimport Physics from './Physics.jsx';\n\nfunction App() {\n\n  const [command, setCommand] = useState(defaultCommand.name);\n  const [engine] = useState(Engine.create());\n\n  return (\n    <div className=\"App\">\n        <Physics engine={engine} command={command}/>\n        <Controls setCommand={setCommand} command={command}></Controls>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}