{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","group","Body","nextGroup","engine","Engine","create","render","Render","element","document","getElementById","options","showAngleIndicator","showCollisions","width","showDebug","showPositions","showIds","showShadows","showVertexNumbers","showVelocity","ground","Bodies","rectangle","isStatic","car","Composite","label","carBody","collisionFilter","frontWheel","circle","friction","backWheel","frontAxle","Constraint","bodyB","pointB","x","y","bodyA","stiffness","length","backAxle","add","addConstraint","mouse","Mouse","myConstraint","pointA","position","angularStiffness","strokeStyle","lineWidth","mouseConstraint","MouseConstraint","constraint","World","world","pyramid2","Composites","pyramid","runner","run","Events","on","setAngularVelocity","init","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.5fdcf01c.chunk.js","sourcesContent":["import './App.css';\n\nimport { useEffect } from 'react';\nimport { Engine, Render, Bodies, World, MouseConstraint, Mouse, Constraint, Body, Composite, Runner, Events, Composites } from 'matter-js';\n\n\nfunction App() {\n\n  useEffect(() => {\n    init();\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div id=\"physics\"></div>\n        <p>\n          Evolution\n        </p>\n\n      </header>\n    </div>\n  );\n\n\n  function init() {\n\n    var group = Body.nextGroup(true);\n\n    // create an engine\n    var engine = Engine.create();\n\n    // create a renderer\n    var render = Render.create({\n      element: document.getElementById(\"physics\"),\n      engine: engine,\n      options: {\n        showAngleIndicator: true,\n        showCollisions: true,\n        width: 2200,\n        showDebug: true,\n        showPositions: true,\n        showIds: true,\n        showShadows: true,\n        showVertexNumbers: false,\n        showVelocity: true,\n        showCollisions: true,\n        showSeparations: true,\n        showShadows: true,\n      }\n    });\n\n    // create two boxes and a ground\n    var boxA = Bodies.rectangle(200, 200, 400, 80);\n    var boxB = Bodies.rectangle(450, 50, 80, 80);\n    var ground = Bodies.rectangle(400, 610, 30000, 60, { isStatic: true });\n\n    var car = Composite.create({ label: 'Car' });\n\n    const carBody = Bodies.rectangle(200, 60, 200, 20, {\n      collisionFilter: {\n        group: group\n      }\n    })\n\n    const frontWheel = Bodies.circle(100, 60, 70, {\n      collisionFilter: {\n        group: group\n      },\n      friction: 0.8,\n\n    });\n    const backWheel = Bodies.circle(300, 60, 70, {\n      collisionFilter: {\n        group: group\n      },\n      friction: 0.8\n    });\n\n\n\n    var frontAxle = Constraint.create({\n      bodyB: carBody,\n      pointB: { x: 100, y: 0 },\n      bodyA: frontWheel,\n      stiffness: 1,\n      length: 0\n    });\n\n    var backAxle = Constraint.create({\n      bodyB: carBody,\n      pointB: { x: -100, y: 0 },\n      bodyA: backWheel,\n      stiffness: 1,\n      length: 0\n    });\n\n\n\n\n\n    Composite.add(car, carBody)\n    Composite.add(car, frontWheel)\n    Composite.add(car, backWheel)\n\n    Composite.addConstraint(car, frontAxle);\n    Composite.addConstraint(car, backAxle);\n\n\n    const mouse = Mouse.create(document.getElementById(\"physics\"))\n\n    var myConstraint = Constraint.create({\n      label: 'Mouse Constraint',\n      pointA: mouse.position,\n      pointB: { x: 0, y: 0 },\n      length: 0.01,\n      stiffness: 1,\n      angularStiffness: 0,\n      render: {\n        strokeStyle: '#90EE90',\n        lineWidth: 3\n      }\n    });\n\n    const mouseConstraint = MouseConstraint.create(engine, { mouse, constraint: myConstraint })\n\n    // add all of the bodies to the world\n    World.add(engine.world, [\n      //     boxA,\n      //boxB, \n      ground]);\n    World.add(engine.world, [\n      mouseConstraint,\n      //  frontAxle, \n      //  backAxle\n    ]);\n\n    //   World.add(engine.world, Composites.car(150, 100, 150 , 30 , 30 ));\n\n    //   const constraint = Constraint.create({ bodyA: boxA, bodyB: boxB })\n    //   World.add(engine.world, constraint);\n    World.add(engine.world, car);\n\n    var pyramid2 = Composites.pyramid(1300, 0, 15, 30, 0, 0, function (x, y) {\n      return Bodies.rectangle(x, y, 20, 30);\n    });\n\n    //var pyramid3 = Composites.pyramid(800, 0, 12, 12, 0, 0, function (x, y) {\n      //return Bodies.circle(x, y, 8);\n    //});\n\n    World.add(engine.world, pyramid2);\n    //World.add(engine.world, pyramid3);\n\n    // run the engine\n    const runner = Engine.run(engine);\n\n    Events.on(runner, \"beforeTick\", function () {\n      Body.setAngularVelocity(backWheel, .5);\n      Body.setAngularVelocity(frontWheel, .5);\n    })\n\n    //  Runner.stop(runner);\n    // run the renderer\n    Render.run(render);\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}